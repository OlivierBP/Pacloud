# Pacloud project
# https://github.com/OlivierBP/Pacloud
# Created 2018-03-18 by BAL-PETRE Olivier
# License MIT 

AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS CloudFormation template for the Pacloud project

Parameters: 
  AlarmEmail: 
    Description: Email address to notify if operational problems arise
    Default: nobody@amazon.com
    Type: String
  
  Ec2SpotFleetTargetCapacity:
    Description: Target capacity for the EC2 spot fleet
    Default: 1
    Type: Number

  SpotFleetEc2InstanceType:
    Description: >-
      EC2 instance type for the spot fleet
    Type: String
    Default: c3.large
    AllowedValues:
      - c3.large
      - c4.large
      - c5.large
      - m4.large
      - m5.large
    ConstraintDescription: Must be a valid instance type that can hibernate

  KeyPairSpotFleet:
    Description: KeyPair to use to can access the EC2 instances by SSH
    Default: KeyPair_Server1.pem
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

  KeyPairBastionServer:
    Description: KeyPair to use to can access the bastion server by SSH
    Default: KeyPair_Server1.pem
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

  BastionServerInstanceType:
    Description: >-
      EC2 instance type for the bastion server
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro

  SpotFleetAllocationStrategy:
    Description: Choose the instance the be the cheapest or to give higher availability first
    Type: String
    Default: lowestPrice
    AllowedValues:
      - lowestPrice
      - diversified


Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - 
        Label: 
          default: EC2 Spot Fleet Configuration
        Parameters: 
          - SpotFleetEc2InstanceType
          - Ec2SpotFleetTargetCapacity
          - SpotFleetAllocationStrategy
          - KeyPairSpotFleet
      - 
        Label: 
          default: Bastion server Configuration
        Parameters: 
          - BastionServerInstanceType
          - KeyPairBastionServer
      - 
        Label: 
          default: Alarm configuration
        Parameters: 
          - AlarmEmail

    ParameterLabels: 
      SpotFleetEc2InstanceType: 
        default: Instance type
      Ec2SpotFleetTargetCapacity: 
        default: Number of instances
      KeyPairSpotFleet: 
        default: KeyPair
      AlarmEmail: 
        default: E-mail
      BastionServerInstanceType:
        default: Instance type
      KeyPairBastionServer: 
        default: KeyPair
      SpotFleetAllocationStrategy:
        default: Allocation strategy





Mappings:
  SpotInstanceType2Arch:
    c3.large:
      Arch: '64'
    c4.large:
      Arch: '64'
    c5.large:
      Arch: '64'
    m4.large:
      Arch: '64'
    m5.large:
      Arch: '64'
  SpotInstanceRegionArch2AMI:
    eu-west-1:
      '64': ami-e795dd9e

  BastionInstanceType2Arch:
    t2.micro:
      Arch: '64'
  BastionInstanceRegionArch2AMI:
    eu-west-1:
      '64': ami-e795dd9e




Resources:
  ################## LAMBDA PACKAGE REQUEST ##################
  LambdaPackageRequest:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: !Join 
          - |+
          
          - - '''use strict'';'
            - ''
            - // PackageRequest Package Lambda
            - 'exports.handler = (event, context, callback) => {'
            - '  console.log(''Event:'', JSON.stringify(event));'
            - '  const name = event.name || ''NONE'';'
            - '  const response = {response: `You requested the package ${name}`};'
            - '  callback(null, response);'
            - '};'
      Description: Check if a package is already compiled. If yes, return the URL, if no, request to compile it
      FunctionName: LambdaPackageRequest
      Handler: index.handler
      Role: !GetAtt 
        - LambdaPackageRequestRole
        - Arn
      Runtime: nodejs4.3
      Timeout: 10
      MemorySize: 128
      Tags:
        - Key: Project
          Value: Pacloud
        - Key: Name
          Value: LambdaPackageRequest

  LambdaPackageRequestRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'


  ################## LAMBDA SYNC CLIENT DB ##################
  LambdaSyncClientDb:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: !Join 
          - |+
          
          - - '''use strict'';'
            - ''
            - // PackageRequest Package Lambda
            - 'exports.handler = (event, context, callback) => {'
            - '  console.log(''Event:'', JSON.stringify(event));'
            - '  const response = {response: `Here is the list of all the packages and versions`};'
            - '  callback(null, response);'
            - '};'
      Description: Return the list of all the packages and versions
      FunctionName: LambdaSyncClientDb
      Handler: index.handler
      Role: !GetAtt 
        - LambdaSyncClientDbRole
        - Arn
      Runtime: nodejs4.3
      Timeout: 10
      MemorySize: 128
      Tags:
        - Key: Project
          Value: Pacloud
        - Key: Name
          Value: LambdaSyncClientDb

  LambdaSyncClientDbRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'


  ################## API GATEWAY ##################
  PacloudApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: Pacloud API
      FailOnWarnings: true
      
  ApiGatewayCloudWatchLogsRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: ApiGatewayLogsPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:DescribeLogGroups'
                  - 'logs:DescribeLogStreams'
                  - 'logs:PutLogEvents'
                  - 'logs:GetLogEvents'
                  - 'logs:FilterLogEvents'
                Resource: '*'

  ApiGatewayAccount:
    Type: 'AWS::ApiGateway::Account'
    Properties:
      CloudWatchRoleArn: !GetAtt 
        - ApiGatewayCloudWatchLogsRole
        - Arn

  PacloudApiStage:
    DependsOn:
      - ApiGatewayAccount
    Type: 'AWS::ApiGateway::Stage'
    Properties:
      DeploymentId: !Ref ApiDeployment
      MethodSettings:
        - DataTraceEnabled: true
          HttpMethod: '*'
          LoggingLevel: INFO
          ResourcePath: /*
      RestApiId: !Ref PacloudApi
      StageName: LATEST

  ApiDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    DependsOn:
      - PackageRequest
      - SyncRequest
    Properties:
      RestApiId: !Ref PacloudApi
      StageName: DummyStage

  LambdaPackageRequestPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      FunctionName: !GetAtt 
        - LambdaPackageRequest
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join 
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref PacloudApi
          - /*

  PackageResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref PacloudApi
      ParentId: !GetAtt 
        - PacloudApi
        - RootResourceId
      PathPart: package

  PackageRequest:
    DependsOn: LambdaPackageRequestPermission
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Join 
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - !GetAtt 
              - LambdaPackageRequest
              - Arn
            - /invocations
        IntegrationResponses:
          - StatusCode: 200
        RequestTemplates:
          application/json: !Join 
            - ''
            - - '{'
              - '  "name": "$input.params(''name'')"'
              - '}'
      RequestParameters:
        method.request.querystring.name: false
      ResourceId: !Ref PackageResource
      RestApiId: !Ref PacloudApi
      MethodResponses:
        - StatusCode: 200

  SyncResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref PacloudApi
      ParentId: !GetAtt 
        - PacloudApi
        - RootResourceId
      PathPart: sync

  LambdaSyncClientDbPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      FunctionName: !GetAtt 
        - LambdaSyncClientDb
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join 
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref PacloudApi
          - /*

  SyncRequest:
    DependsOn: LambdaSyncClientDbPermission
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Join 
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - !GetAtt 
              - LambdaSyncClientDb
              - Arn
            - /invocations
        IntegrationResponses:
          - StatusCode: 200
        RequestTemplates:
          application/json: !Join 
            - ''
            - - '{'
              - '  "name": "$input.params(''name'')"'
              - '}'
      RequestParameters:
        method.request.querystring.name: false
      ResourceId: !Ref SyncResource
      RestApiId: !Ref PacloudApi
      MethodResponses:
        - StatusCode: 200


  ################## SQS ##################
  QueueToCompile: 
    Type: "AWS::SQS::Queue"
    Properties: 
      MaximumMessageSize: 1024
      MessageRetentionPeriod: 345600
      VisibilityTimeout: 7200
      RedrivePolicy: 
        deadLetterTargetArn: 
          Fn::GetAtt: 
            - "DeadLetterQueueToCompile"
            - "Arn"
        maxReceiveCount: 2

  # If a package tried to be compiled more than 2 times, the request is put in this queue
  DeadLetterQueueToCompile: 
    Type: "AWS::SQS::Queue"
    Properties: 
      MaximumMessageSize: 262144
      MessageRetentionPeriod: 1209600


  ################## SNS ##################
  AlarmTopic: 
    Type: "AWS::SNS::Topic"
    Properties: 
      Subscription: 
        - 
          Endpoint: !Ref "AlarmEmail"
          Protocol: "email"


  ################## S3 ##################
  # S3 bucket to store the packages
  # Alarm with SNS if all replicas are lost for an object
  # Encrypted with Amazon S3-managed keys SSE-S3
  S3BucketPacloud:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      LoggingConfiguration:
        DestinationBucketName: !Ref 'S3BucketPacloudLogging'
        LogFilePrefix: logs
      NotificationConfiguration:
        TopicConfigurations:
        - Topic: !Ref AlarmTopic
          Event: s3:ReducedRedundancyLostObject
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  # Encrypted with Amazon S3-managed keys SSE-S3
  # LifeCycle: After 150 days, move the log file to the glacier
  S3BucketPacloudLogging:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: LogDeliveryWrite
      LifecycleConfiguration:
        Rules:
        - Id: GlacierRule
          Status: Enabled
          Transitions:
            - TransitionInDays: '150'
              StorageClass: Glacier
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

        

  ################## CLOUDFRONT ##################
# CloudFrontDistribution:
#     Type: 'AWS::CloudFront::Distribution'
#     Properties:
#       DistributionConfig:
#         Enabled: true
#         HttpVersion: http2
#         Logging: true
#         DefaultCacheBehavior:
#           LambdaFunctionAssociations:
#             - EventType: string-value
#               LambdaFunctionARN: string-value
#         IPV6Enabled: true
#         Origins:
#           - CustomOriginConfig:
#               OriginKeepaliveTimeout: integer-value
#               OriginReadTimeout: integer-value
#       Tags:
#         - Key: Project
#           Value: Pacloud

# DefaultRootObject


  ################## EC2 SPOT FLEET ##################
  PacloudEc2SpotFleetRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - spotfleet.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /

  PacloudEc2SpotFleetRolePolicies:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: PacloudEc2SpotFleetRolePolicy 
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - 'ec2:DescribeImages'
              - 'ec2:DescribeSubnets'
              - 'ec2:RequestSpotInstances'
              - 'ec2:DescribeInstanceStatus'
            Resource:
              - '*'
          - Effect: Allow
            Action:
              - 'iam:PassRole'
            Resource:
              - '*'
            Condition:
              StringEquals:
                'iam:PassedToService':
                  - ec2.amazonaws.com
                  - ec2.amazonaws.com.cn
          - Effect: Allow
            Action:
              - 'ec2:CreateTags'
            Resource:
              - 'arn:aws:ec2:*:*:instance/*'
              - 'arn:aws:ec2:*:*:spot-instances-request/*'
            Condition:
              'ForAllValues:StringEquals':
                'aws:TagKeys':
                  - 'aws:ec2spot:fleet-request-id'
          - Effect: Allow
            Action:
              - 'ec2:TerminateInstances'
            Resource: '*'
            Condition:
              StringLike:
                'ec2:ResourceTag/aws:ec2spot:fleet-request-id': '*'
      Roles:
        - !Ref PacloudEc2SpotFleetRole

  # VPC
  VpcPacloudSpotFleet:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: PacloudSpotFleet

  # Internet Gateway for the VPC
  IgVpcPacloudSpotFleet:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: IgVpcPacloudSpotFleet
    DependsOn:
      - VpcPacloudSpotFleet

  # Need to attach the Internet Gateway to the VPC
  VPCGatewayAttachmentForIg:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId: !Ref IgVpcPacloudSpotFleet
      VpcId: !Ref VpcPacloudSpotFleet

  # Private subnet for all the EC2 spot instances
  PrivateSubnetPacloudSpotFleet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VpcPacloudSpotFleet
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: eu-west-1a
      Tags:
        - Key: Name
          Value: PrivateSubnetPacloudSpotFleet
    DependsOn:
      - VpcPacloudSpotFleet

  # Public subnet for the bastion server and the NAT Gateway
  PublicSubnetPacloud:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VpcPacloudSpotFleet
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: eu-west-1a
      Tags:
        - Key: Name
          Value: PublicSubnetPacloud
    DependsOn:
      - VpcPacloudSpotFleet

  # Create the default route to internet for the public subnet
  RouteTablePublicSubnet:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VpcPacloudSpotFleet
      Tags:
        - Key: Name
          Value: RouteTablePublicSubnet
  RouteToIgPublicSubnet:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref RouteTablePublicSubnet
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IgVpcPacloudSpotFleet
    DependsOn: VPCGatewayAttachmentForIg
  SubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref RouteTablePublicSubnet
      SubnetId: !Ref PublicSubnetPacloud

  # Security group fot the bastion server
  SgPacloudBastionServer:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: pacloud-bastionserver-sg
      GroupName: pacloud-bastionserver-sg
      VpcId: !Ref VpcPacloudSpotFleet
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: pacloud-bastionserver-sg

  # Bastion server
  BastionServer: 
    Type: "AWS::EC2::Instance"
    Properties:
      InstanceType: !Ref BastionServerInstanceType
      ImageId: 
        Fn::FindInMap: 
          - BastionInstanceRegionArch2AMI
          - !Ref "AWS::Region"
          - Fn::FindInMap:
              - BastionInstanceType2Arch
              - !Ref BastionServerInstanceType
              - Arch
      KeyName: !Ref KeyPairBastionServer
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeleteOnTermination: true
          DeviceIndex: 0
          GroupSet: 
            - !Ref SgPacloudBastionServer
          SubnetId: !Ref PublicSubnetPacloud
      Tags:
      - Key: Project
        Value: Pacloud
      - Key: Name
        Value: BastionServer

  # Security group for the spot instances: accept only ssh connections from the bastion server
  SgPacloudSpotFleet:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: pacloud-spotfleet-sg
      GroupName: pacloud-spotfleet-sg
      VpcId: !Ref VpcPacloudSpotFleet
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          SourceSecurityGroupId: !Ref SgPacloudBastionServer
          # CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: pacloud-spotfleet-sg

  SpotFleet:
    Type: AWS::EC2::SpotFleet
    Properties:
      SpotFleetRequestConfigData:
        AllocationStrategy: !Ref SpotFleetAllocationStrategy
        ExcessCapacityTerminationPolicy: default
        IamFleetRole: !GetAtt [PacloudEc2SpotFleetRole, Arn]
        ReplaceUnhealthyInstances: true
        # SpotPrice: '1000'
        TargetCapacity: !Ref Ec2SpotFleetTargetCapacity
        TerminateInstancesWithExpiration: true
        Type: maintain
        
        LaunchSpecifications:

        - EbsOptimized: 'false'
          # IamInstanceProfile: 
          ImageId:
            Fn::FindInMap:
            - SpotInstanceRegionArch2AMI
            - !Ref AWS::Region
            - Fn::FindInMap:
              - SpotInstanceType2Arch
              - !Ref SpotFleetEc2InstanceType
              - Arch
          InstanceType: !Ref SpotFleetEc2InstanceType
          KeyName: !Ref KeyPairSpotFleet
          Monitoring: 
            Enabled: true
          SecurityGroups:
          - GroupId:
              Fn::GetAtt:
              - SgPacloudSpotFleet
              - GroupId
          # SpotPrice: 
          SubnetId: !Ref PrivateSubnetPacloudSpotFleet
          TagSpecifications: 
          - ResourceType: instance
            Tags:
            - Key: Project
              Value: Pacloud
            - Key: Name
              Value: PacloudSpotInstance

        # - EbsOptimized: 'false'
        #   # IamInstanceProfile: 
        #   ImageId:
        #     Fn::FindInMap:
        #     - SpotInstanceRegionArch2AMI
        #     - !Ref AWS::Region
        #     - Fn::FindInMap:
        #       - SpotInstanceType2Arch
        #       - !Ref SpotFleetEc2InstanceType
        #       - Arch
        #   InstanceType: !Ref SpotFleetEc2InstanceType
        #   KeyName: !Ref KeyPairSpotFleet
        #   Monitoring: 
        #     Enabled: true
        #   SecurityGroups:
        #   - GroupId:
        #       Fn::GetAtt:
        #       - SgPacloudSpotFleet
        #       - GroupId
        #   # SpotPrice: 
        #   SubnetId: !Ref PrivateSubnetPacloudSpotFleet
        #   TagSpecifications: 
        #   - ResourceType: instance
        #     Tags:
        #     - Key: Project
        #       Value: Pacloud
        #     - Key: Name
        #       Value: PacloudSpotInstance

# InstanceInterruptionBehavior to hibernate needs a workaround: doesn't work in CloudFormation (not implemented)   







   
Outputs:
  ApiRootUrl:
    Description: Root URL of the API gateway
    Value: !Join 
      - ''
      - - 'https://'
        - !Ref PacloudApi
        - .execute-api.
        - !Ref 'AWS::Region'
        - .amazonaws.com
  ApiRequestPackageUrl:
    Description: Url to request a package
    Value: !Join 
      - ''
      - - 'https://'
        - !Ref PacloudApi
        - .execute-api.
        - !Ref 'AWS::Region'
        - .amazonaws.com
        - /LATEST/package?name=packagename
  ApiSyncClientDbUrl:
    Description: Url to sync the package database
    Value: !Join 
      - ''
      - - 'https://'
        - !Ref PacloudApi
        - .execute-api.
        - !Ref 'AWS::Region'
        - .amazonaws.com
        - /LATEST/sync

  BucketStorage:
    Value: !Ref 'S3BucketPacloud'
    Description: Bucket to store the packages and any public data
  BucketLogging:
    Value: !Ref 'S3BucketPacloudLogging'
    Description: Bucket to store the logging for Pacloud

  AlarmEmail:
    Value: !Ref AlarmEmail
    Description: Email address to notify if operational problems arise

  BastionServer:
    Value: !GetAtt BastionServer.PublicIp
    Description: Public IP address of the bastion server
  SpotInstanceConnect:
    Value: ssh -i /path/to/key/spot.pem -o ProxyCommand='ssh -i /path/to/key/bastion.pem -W %h:%p user@publicIpBastion' user@privateIpSpot
    Description: Connection chain to reach spot instance through the bastion server
