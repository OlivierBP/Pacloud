# Pacloud project
# Ec2
# https://github.com/OlivierBP/Pacloud
# Created 2018-03-18 by BAL-PETRE Olivier
# License MIT 

AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Creation of all the Ec2 needed (Bastion server, spot fleet)

Parameters:   
  Ec2SpotFleetTargetCapacity:
    Description: Target capacity for the EC2 spot fleet
    Default: 1
    Type: Number

  SpotFleetEc2InstanceType:
    Description: >-
      EC2 instance type for the spot fleet
    Type: String
    Default: c3.large
    AllowedValues:
      - c3.large
      - c4.large
      - c5.large
      - m4.large
      - m5.large
    ConstraintDescription: Must be a valid instance type that can hibernate

  KeyPairSpotFleet:
    Description: KeyPair to use to can access the EC2 instances by SSH
    Default: KeyPair_Server1.pem
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

  KeyPairBastionServer:
    Description: KeyPair to use to can access the bastion server by SSH
    Default: KeyPair_Server1.pem
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

  BastionServerInstanceType:
    Description: >-
      EC2 instance type for the bastion server
    Type: String
    Default: t2.nano
    AllowedValues:
      - t2.micro
      - t2.nano
  
  NatInstanceType:
    Description: Type instance for the NAT Instance
    Default: t2.nano
    Type: String
    AllowedValues:
      - t2.nano

  SpotFleetAllocationStrategy:
    Description: Choose the instance the be the cheapest or to give higher availability first
    Type: String
    Default: lowestPrice
    AllowedValues:
      - lowestPrice
      - diversified

  # From Network
  VpcPacloudSpotFleet:
    Type: String
  PublicSubnetPacloud1:
    Type: String
  PublicSubnetPacloud2:
    Type: String
  PublicSubnetPacloud3:
    Type: String
  PrivateSubnetPacloudSpotFleet1:
    Type: String
  PrivateSubnetPacloudSpotFleet2:
    Type: String
  PrivateSubnetPacloudSpotFleet3:
    Type: String
  BucketStorageArn:
    Type: String
  QueueToCompileArn:
    Type: String

  # From Serverless
  S3BucketLambda:
    Type: String

  S3KeyLambdaCustomResourceSpotFleet:
    Description: Path in the S3 bucket where the lambda code for CustomResourceSpotFleet is stored
    Default: Lambda/CustomResource_SpotFleet.zip
    Type: String








Mappings:
  SpotInstanceType2Arch:
    c3.large:
      Arch: '64'
    c4.large:
      Arch: '64'
    c5.large:
      Arch: '64'
    m4.large:
      Arch: '64'
    m5.large:
      Arch: '64'
  SpotInstanceRegionArch2AMI:
    eu-west-1:
      '64': ami-9ce4bee5
      # '64': ami-49792330
      # '64': ami-f8b7ec81
      # '64': ami-49b0eb30
      # '64': ami-05461d7c
      # '64': ami-44dc843d
      # '64': ami-19104d60


  BastionInstanceType2Arch:
    t2.nano:
      Arch: '64'
    t2.micro:
      Arch: '64'
  BastionInstanceRegionArch2AMI:
    eu-west-1:
      '64': ami-e795dd9e

  NatInstanceType2Arch:
    t2.nano:
      Arch: 64
  NatInstanceRegionArch2AMI:
    eu-west-1:
      '64': ami-a136a9d8






Resources:
  ################## EC2 BASTION SERVER ##################
  # Security group for the bastion server
  SgPacloudBastionServer:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: pacloud-bastionserver-sg
      GroupName: pacloud-bastionserver-sg
      VpcId: !Ref VpcPacloudSpotFleet
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: pacloud-bastionserver-sg

  # Bastion server
  BastionServer: 
    Type: "AWS::EC2::Instance"
    Properties:
      InstanceType: !Ref BastionServerInstanceType
      ImageId: 
        Fn::FindInMap: 
          - BastionInstanceRegionArch2AMI
          - !Ref "AWS::Region"
          - Fn::FindInMap:
              - BastionInstanceType2Arch
              - !Ref BastionServerInstanceType
              - Arch
      KeyName: !Ref KeyPairBastionServer
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeleteOnTermination: true
          DeviceIndex: 0
          GroupSet: 
            - !Ref SgPacloudBastionServer
          SubnetId: !Ref PublicSubnetPacloud1
      Tags:
      - Key: Project
        Value: Pacloud
      - Key: Name
        Value: BastionServer


  ################## EC2 SPOT FLEET ##################
  PacloudEc2SpotFleetRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - spotfleet.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - 
          PolicyName: PacloudEc2SpotFleetRolePolicy 
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:DescribeImages'
                  - 'ec2:DescribeSubnets'
                  - 'ec2:RequestSpotInstances'
                  - 'ec2:DescribeInstanceStatus'
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - 'iam:PassRole'
                Resource:
                  - '*'
                Condition:
                  StringEquals:
                    'iam:PassedToService':
                      - ec2.amazonaws.com
                      - ec2.amazonaws.com.cn
              - Effect: Allow
                Action:
                  - 'ec2:CreateTags'
                Resource:
                  - 'arn:aws:ec2:*:*:instance/*'
                  - 'arn:aws:ec2:*:*:spot-instances-request/*'
                Condition:
                  'ForAllValues:StringEquals':
                    'aws:TagKeys':
                      - 'aws:ec2spot:fleet-request-id'
              - Effect: Allow
                Action:
                  - 'ec2:TerminateInstances'
                Resource: '*'
                Condition:
                  StringLike:
                    'ec2:ResourceTag/aws:ec2spot:fleet-request-id': '*'

  PacloudEc2WorkerRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: S3PusherPacloudPackages
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 's3:List*'
                  - 's3:Get*'
                  - 's3:Put*'
                Resource: !Join
                  - ''
                  - - !Ref BucketStorageArn
                    - /*
        - PolicyName: QueueToCompileEc2Worker
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'sqs:ChangeMessageVisibility'
                  - 'sqs:DeleteMessage'
                  - 'sqs:GetQueueUrl'
                  - 'sqs:ReceiveMessage'
                Resource: !Ref QueueToCompileArn
        - PolicyName: DynamoDbGetPut
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  # - 'dynamodb:BatchGetItem'
                  # - 'dynamodb:BatchWriteItem'
                  # - 'dynamodb:PutItem'
                  # - 'dynamodb:DescribeTable'
                  # - 'dynamodb:DeleteItem'
                  # - 'dynamodb:GetItem'
                  # - 'dynamodb:Scan'
                  # - 'dynamodb:Query'
                  - 'dynamodb:UpdateItem'
                  # - 'dynamodb:UpdateTable'
                Resource:
                  - 'arn:aws:dynamodb:*:*:table/*/index/*'
                  - !ImportValue DynamoDbPackagesArn


  PacloudEc2WorkerInstanceProfile: 
    Type: "AWS::IAM::InstanceProfile"
    Properties: 
      Roles: 
        - !Ref PacloudEc2WorkerRole

  # Security group for the spot instances: accept only ssh connections from the bastion server
  SgPacloudWorker:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: pacloud-worker-sg
      GroupName: pacloud-worker-sg
      VpcId: !Ref VpcPacloudSpotFleet
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          SourceSecurityGroupId: !Ref SgPacloudBastionServer
      Tags:
        - Key: Name
          Value: pacloud-worker-sg




  LambdaCustomResourceSpotFleet:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Ref S3BucketLambda
        S3Key: !Ref S3KeyLambdaCustomResourceSpotFleet
      Description: Create a spotfleet
      FunctionName: LambdaCustomResourceSpotFleet
      Handler: CustomResource_SpotFleet.lambda_handler
      Role: !GetAtt 
        - LambdaCustomResourceSpotFleetRole
        - Arn
      Runtime: nodejs4.3
      Timeout: 300
      MemorySize: 128
      Tags:
        - Key: Project
          Value: Pacloud
        - Key: Name
          Value: LambdaCustomResourceSpotFleet

  LambdaCustomResourceSpotFleetRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies: 
        - 
          PolicyName: CreateSpotFleet
          PolicyDocument: 
            Version: 2012-10-17
            Statement: 
              - 
                Effect: Allow
                Action: 
                  - ec2:DeleteSpotDatafeedSubscription
                  - ec2:DescribeSpotFleetRequestHistory
                  - ec2:RequestSpotInstances
                  - ec2:CancelSpotFleetRequests
                  - ec2:RequestSpotFleet
                  - ec2:DescribeSpotInstanceRequests
                  - ec2:DescribeSpotFleetRequests
                  - ec2:DescribeSpotPriceHistory
                  - ec2:CancelSpotInstanceRequests
                  - ec2:DescribeSpotFleetInstances
                  - ec2:ModifySpotFleetRequest
                  - ec2:CreateSpotDatafeedSubscription
                  - ec2:DescribeSpotDatafeedSubscription
                Resource: '*'
        - 
          PolicyName: logLambdaCustomResource
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
        - 
          PolicyName: describeStack
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - cloudformation:DescribeStacks
                Resource: arn:aws:cloudformation:*:*:*











  




  ################## NAT INSTANCES ##################
  # Security group for the NAT Instances
  SgPacloudNatInstance:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: pacloud-natinstance-sg
      GroupName: pacloud-natinstance-sg
      VpcId: !Ref VpcPacloudSpotFleet
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref SgPacloudWorker
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref SgPacloudWorker
      Tags:
        - Key: Name
          Value: pacloud-natinstance-sg

  # NAT Instance for AZ a
  # https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_NAT_Instance.html
  NatInstance1: 
    Type: "AWS::EC2::Instance"
    Properties:
      SourceDestCheck: false
      AvailabilityZone: eu-west-1a
      InstanceType: !Ref NatInstanceType
      ImageId: 
        Fn::FindInMap: 
          - NatInstanceRegionArch2AMI
          - !Ref "AWS::Region"
          - Fn::FindInMap:
              - NatInstanceType2Arch
              - !Ref NatInstanceType
              - Arch
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeleteOnTermination: true
          DeviceIndex: 0
          GroupSet: 
            - !Ref SgPacloudNatInstance
          SubnetId: !Ref PublicSubnetPacloud1
      Tags:
      - Key: Project
        Value: Pacloud
      - Key: Name
        Value: NatInstance1

  # NAT Instance for AZ b
  NatInstance2: 
    Type: "AWS::EC2::Instance"
    Properties:
      SourceDestCheck: false
      AvailabilityZone: eu-west-1b
      InstanceType: !Ref NatInstanceType
      ImageId: 
        Fn::FindInMap: 
          - NatInstanceRegionArch2AMI
          - !Ref "AWS::Region"
          - Fn::FindInMap:
              - NatInstanceType2Arch
              - !Ref NatInstanceType
              - Arch
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeleteOnTermination: true
          DeviceIndex: 0
          GroupSet: 
            - !Ref SgPacloudNatInstance
          SubnetId: !Ref PublicSubnetPacloud2
      Tags:
      - Key: Project
        Value: Pacloud
      - Key: Name
        Value: NatInstance2

  # NAT Instance for AZ b
  NatInstance3: 
    Type: "AWS::EC2::Instance"
    Properties:
      SourceDestCheck: false
      AvailabilityZone: eu-west-1c
      InstanceType: !Ref NatInstanceType
      ImageId: 
        Fn::FindInMap: 
          - NatInstanceRegionArch2AMI
          - !Ref "AWS::Region"
          - Fn::FindInMap:
              - NatInstanceType2Arch
              - !Ref NatInstanceType
              - Arch
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeleteOnTermination: true
          DeviceIndex: 0
          GroupSet: 
            - !Ref SgPacloudNatInstance
          SubnetId: !Ref PublicSubnetPacloud3
      Tags:
      - Key: Project
        Value: Pacloud
      - Key: Name
        Value: NatInstance3

  
  # Default routes for the private subnets point to the NAT
  RouteTablePrivateSubnet1:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VpcPacloudSpotFleet
  RouteToNatPrivateSubnet1:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref RouteTablePrivateSubnet1
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId: !Ref NatInstance1
    DependsOn: NatInstance1
  PrivateSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref RouteTablePrivateSubnet1
      SubnetId: !Ref PrivateSubnetPacloudSpotFleet1

  RouteTablePrivateSubnet2:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VpcPacloudSpotFleet
  RouteToNatPrivateSubnet2:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref RouteTablePrivateSubnet2
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId: !Ref NatInstance2
    DependsOn: NatInstance2
  PrivateSubnet2SubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref RouteTablePrivateSubnet2
      SubnetId: !Ref PrivateSubnetPacloudSpotFleet2

  RouteTablePrivateSubnet3:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VpcPacloudSpotFleet
  RouteToNatPrivateSubnet3:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref RouteTablePrivateSubnet3
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId: !Ref NatInstance3
    DependsOn: NatInstance3
  PrivateSubnet3SubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref RouteTablePrivateSubnet3
      SubnetId: !Ref PrivateSubnetPacloudSpotFleet3





   
Outputs:

  BastionServer:
    Value: !GetAtt BastionServer.PublicIp
    Description: Public IP address of the bastion server
  SpotInstanceConnect:
    Value: ssh -i /path/to/key/spot.pem -o ProxyCommand='ssh -i /path/to/key/bastion.pem -W %h:%p user@publicIpBastion' user@privateIpSpot
    Description: Connection chain to reach spot instance through the bastion server with local ssh keys

  # Export values to create the CustomResource SpotFleet in another stack
  AllocationStrategy:
    Value: !Ref SpotFleetAllocationStrategy
    Description: To create the CustomResource SpotFleet
    Export:
      Name: AllocationStrategy

  IamFleetRole:
    Value: !GetAtt PacloudEc2SpotFleetRole.Arn
    Description: To create the CustomResource SpotFleet
    Export:
      Name: IamFleetRole

  TargetCapacity:
    Value: !Ref Ec2SpotFleetTargetCapacity
    Description: To create the CustomResource SpotFleet
    Export:
      Name: TargetCapacity

  IamInstanceProfile:
    Value: !GetAtt PacloudEc2WorkerInstanceProfile.Arn
    Description: To create the CustomResource SpotFleet
    Export:
      Name: IamInstanceProfile

  ImageId:
    Value: 
      Fn::FindInMap:
          - SpotInstanceRegionArch2AMI
          - !Ref AWS::Region
          - Fn::FindInMap:
            - SpotInstanceType2Arch
            - !Ref SpotFleetEc2InstanceType
            - Arch
    Description: To create the CustomResource SpotFleet
    Export:
      Name: ImageId

  InstanceType:
    Value: !Ref SpotFleetEc2InstanceType
    Description: To create the CustomResource SpotFleet
    Export:
      Name: InstanceType

  KeyName:
    Value: !Ref KeyPairSpotFleet
    Description: To create the CustomResource SpotFleet
    Export:
      Name: KeyName

  SecurityGroups:
    Value: 
      Fn::GetAtt:
            - SgPacloudWorker
            - GroupId
    Description: To create the CustomResource SpotFleet
    Export:
      Name: SecurityGroups

  SubnetId:
    Value: !Join
        - ','
        - - !Ref PrivateSubnetPacloudSpotFleet1 
          - !Ref PrivateSubnetPacloudSpotFleet2
          - !Ref PrivateSubnetPacloudSpotFleet3
    Description: To create the CustomResource SpotFleet
    Export:
      Name: SubnetId
