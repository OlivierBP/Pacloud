# Pacloud project
# Serverless
# https://github.com/OlivierBP/Pacloud
# Created 2018-03-18 by BAL-PETRE Olivier
# License MIT 

AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Creation of the serverless part of the application (API Gateway, Lambda, SQS, S3)


Parameters:
  AlarmEmail: 
    Description: Email address to notify if operational problems arise
    Default: nobody@amazon.com
    Type: String

  QueueToCompileName:
    Description: Name of the SQS Queue to compile. Must be the same in the code of the Lambda and in the Gentoo AMI
    Default: QueueToCompile
    Type: String

  S3BucketLambda:
    Description: Name of the S3 bucket where the lambda code is stored
    Default: pacloud
    Type: String

  S3KeyLambdaPackageRequest:
    Description: Path in the S3 bucket where the lambda code for PackageRequest is stored
    Default: Lambda/PackageRequest.zip
    Type: String

  S3KeyLambdaSyncClientDb:
    Description: Path in the S3 bucket where the lambda code for SyncClientDb is stored
    Default: Lambda/SyncClientDb.zip
    Type: String

# Mappings:


Resources:
  ################## LAMBDA PACKAGE REQUEST ##################
  LambdaPackageRequest:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Ref S3BucketLambda
        S3Key: !Ref S3KeyLambdaPackageRequest
      Description: Check if a package is already compiled. If yes, return the URL, if no, request to compile it
      FunctionName: LambdaPackageRequest
      Handler: PackageRequest.lambda_handler
      Role: !GetAtt 
        - LambdaPackageRequestRole
        - Arn
      Runtime: nodejs4.3
      Timeout: 10
      MemorySize: 128
      Tags:
        - Key: Project
          Value: Pacloud
        - Key: Name
          Value: LambdaPackageRequest

  LambdaPackageRequestRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies: 
        - 
          PolicyName: PutInQueueToCompile
          PolicyDocument: 
            Version: 2012-10-17
            Statement: 
              - 
                Effect: Allow
                Action: 
                  - sqs:SendMessage
                  - sqs:GetQueueUrl
                Resource: !GetAtt QueueToCompile.Arn

  LambdaPackageRequestRoleInstanceProfile: 
    Type: "AWS::IAM::InstanceProfile"
    Properties: 
      Path: "/"
      Roles: 
        - !Ref LambdaPackageRequestRole


  ################## LAMBDA SYNC CLIENT DB ##################
  LambdaSyncClientDb:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Ref S3BucketLambda
        S3Key: !Ref S3KeyLambdaSyncClientDb
      Description: Return the list of all the packages and versions
      FunctionName: LambdaSyncClientDb
      Handler: SyncClientDb.lambda_handler
      Role: !GetAtt 
        - LambdaSyncClientDbRole
        - Arn
      Runtime: nodejs4.3
      Timeout: 10
      MemorySize: 128
      Tags:
        - Key: Project
          Value: Pacloud
        - Key: Name
          Value: LambdaSyncClientDb

  LambdaSyncClientDbRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'


  ################## API GATEWAY ##################
  PacloudApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: Pacloud API
      FailOnWarnings: true
      
  ApiGatewayCloudWatchLogsRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: ApiGatewayLogsPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:DescribeLogGroups'
                  - 'logs:DescribeLogStreams'
                  - 'logs:PutLogEvents'
                  - 'logs:GetLogEvents'
                  - 'logs:FilterLogEvents'
                Resource: '*'

  ApiGatewayAccount:
    Type: 'AWS::ApiGateway::Account'
    Properties:
      CloudWatchRoleArn: !GetAtt 
        - ApiGatewayCloudWatchLogsRole
        - Arn

  PacloudApiStage:
    DependsOn:
      - ApiGatewayAccount
    Type: 'AWS::ApiGateway::Stage'
    Properties:
      DeploymentId: !Ref ApiDeployment
      MethodSettings:
        - DataTraceEnabled: true
          HttpMethod: '*'
          LoggingLevel: INFO
          ResourcePath: /*
      RestApiId: !Ref PacloudApi
      StageName: LATEST

  ApiDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    DependsOn:
      - PackageRequest
      - SyncRequest
    Properties:
      RestApiId: !Ref PacloudApi
      StageName: DummyStage

  LambdaPackageRequestPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      FunctionName: !GetAtt 
        - LambdaPackageRequest
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join 
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref PacloudApi
          - /*

  PackageResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref PacloudApi
      ParentId: !GetAtt 
        - PacloudApi
        - RootResourceId
      PathPart: package

  PackageRequest:
    DependsOn: LambdaPackageRequestPermission
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Join 
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - !GetAtt 
              - LambdaPackageRequest
              - Arn
            - /invocations
        IntegrationResponses:
          - StatusCode: 200
        RequestTemplates:
          application/json: !Join 
            - ''
            - - '{'
              - '  "name": "$input.params(''name'')"'
              - '}'
      RequestParameters:
        method.request.querystring.name: false
      ResourceId: !Ref PackageResource
      RestApiId: !Ref PacloudApi
      MethodResponses:
        - StatusCode: 200

  SyncResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref PacloudApi
      ParentId: !GetAtt 
        - PacloudApi
        - RootResourceId
      PathPart: sync

  LambdaSyncClientDbPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      FunctionName: !GetAtt 
        - LambdaSyncClientDb
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join 
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref PacloudApi
          - /*

  SyncRequest:
    DependsOn: LambdaSyncClientDbPermission
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Join 
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - !GetAtt 
              - LambdaSyncClientDb
              - Arn
            - /invocations
        IntegrationResponses:
          - StatusCode: 200
        RequestTemplates:
          application/json: !Join 
            - ''
            - - '{'
              - '  "name": "$input.params(''name'')"'
              - '}'
      RequestParameters:
        method.request.querystring.name: false
      ResourceId: !Ref SyncResource
      RestApiId: !Ref PacloudApi
      MethodResponses:
        - StatusCode: 200


  ################## SQS ##################
  QueueToCompile: 
    Type: "AWS::SQS::Queue"
    Properties: 
      QueueName: !Ref QueueToCompileName
      MaximumMessageSize: 1024
      MessageRetentionPeriod: 345600
      VisibilityTimeout: 7200
      RedrivePolicy: 
        deadLetterTargetArn: 
          Fn::GetAtt: 
            - "DeadLetterQueueToCompile"
            - "Arn"
        maxReceiveCount: 2

  # If a package tried to be compiled more than 2 times, the request is put in this queue
  DeadLetterQueueToCompile: 
    Type: "AWS::SQS::Queue"
    Properties: 
      MaximumMessageSize: 262144
      MessageRetentionPeriod: 1209600


  ################## SNS ##################
  AlarmTopic: 
    Type: "AWS::SNS::Topic"
    Properties: 
      Subscription: 
        - 
          Endpoint: !Ref "AlarmEmail"
          Protocol: "email"


  ################## S3 ##################
  # S3 bucket to store the packages
  # Alarm with SNS if all replicas are lost for an object
  # Encrypted with Amazon S3-managed keys SSE-S3
  S3BucketPacloud:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      LoggingConfiguration:
        DestinationBucketName: !Ref 'S3BucketPacloudLogging'
        LogFilePrefix: logs
      NotificationConfiguration:
        TopicConfigurations:
        - Topic: !Ref AlarmTopic
          Event: s3:ReducedRedundancyLostObject
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  # Encrypted with Amazon S3-managed keys SSE-S3
  # LifeCycle: After 150 days, move the log file to the glacier
  S3BucketPacloudLogging:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: LogDeliveryWrite
      LifecycleConfiguration:
        Rules:
        - Id: GlacierRule
          Status: Enabled
          Transitions:
            - TransitionInDays: '150'
              StorageClass: Glacier
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256






Outputs:
  ApiRootUrl:
    Description: Root URL of the API gateway
    Value: !Join 
      - ''
      - - 'https://'
        - !Ref PacloudApi
        - .execute-api.
        - !Ref 'AWS::Region'
        - .amazonaws.com
  ApiRequestPackageUrl:
    Description: Url to request a package
    Value: !Join 
      - ''
      - - 'https://'
        - !Ref PacloudApi
        - .execute-api.
        - !Ref 'AWS::Region'
        - .amazonaws.com
        - /LATEST/package?name=packagename
  ApiSyncClientDbUrl:
    Description: Url to sync the package database
    Value: !Join 
      - ''
      - - 'https://'
        - !Ref PacloudApi
        - .execute-api.
        - !Ref 'AWS::Region'
        - .amazonaws.com
        - /LATEST/sync

  BucketStorage:
    Value: !Ref S3BucketPacloud
    Description: Bucket to store the packages and any public data
  BucketStorageArn:
    Value: !GetAtt S3BucketPacloud.Arn
    Description: ARN of BucketStorage
  BucketLogging:
    Value: !Ref S3BucketPacloudLogging
    Description: Bucket to store the logging for Pacloud

  AlarmEmail:
    Value: !Ref AlarmEmail
    Description: Email address to notify if operational problems arise

  QueueToCompileName:
    Value: !Ref QueueToCompileName
    Description: Name of the SQS queue that get the compilation requests
  QueueToCompileArn:
    Value: !GetAtt QueueToCompile.Arn
    Description: ARN of QueueToCompile